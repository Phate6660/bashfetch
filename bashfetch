#!/usr/bin/env bash

## A pure-bash information fetching tool.
## Created by Phate6660.

## Information Gathering
# CPU
cpu_file="$(< /proc/cpuinfo)"
IFS=$'\n'
for line in ${cpu_file}; do
    case "${line}" in
        *"model name"*) pretty_name_line="${line}";;
        *"siblings"*)   threads_line="${line}";;
        *"cpu cores"*)  cores_line="${line}";;
    esac
    if  [ -n "${pretty_name_line}" ] &&
        [ -n "${threads_line}" ]     &&
        [ -n "${cores_line}" ]; then
        break # We no longer need to iterate through the file.
    fi
done
unset IFS # We no longer need to delimit by newline.
IFS=":" read -ra model_name <<< "${pretty_name_line}"
IFS=":" read -ra cores      <<< "${cores_line}"
IFS=":" read -ra threads    <<< "${threads_line}"
# ':1' removes the first character of the string.
CPU="${model_name[1]:1}"
CORES="${cores[1]:1}"
THREADS="${threads[1]:1}"

# Distro
distro_file="$(< /etc/os-release)"
for line in ${distro_file}; do
    if [[ "${line}" == PRETTY_NAME* ]]; then
        pretty_name_line="${line}"
        break
    fi
done
IFS="\"" read -ra name <<< "${pretty_name_line}"
DISTRO="${name[1]}"

# Hostname
# /etc/hostname is the standard file for finding the hostname.
# In cases it's not available, use the file that the kernel provides.
if [ -f "/etc/hostname" ]; then
    HOSTNAME="$(< /etc/hostname)"
elif [ -f "/proc/sys/kernel/hostname" ]; then
    HOSTNAME="$(< /proc/sys/kernel/hostname)"
fi

# Kernel
LINUX="$(< /proc/sys/kernel/osrelease)"

# Packages
count_pacman() {
    total=0
    explicit=0
    for package in /var/lib/pacman/local/*; do
        # 'ALPM_DB_VERSION' isn't a package.
        if [[ "${package}" =~ .*ALPM_DB_VERSION.* ]]; then
            continue
        fi
        total=$((total + 1))
        description="$(< "${package}"/desc)"
        IFS=$'\n'
        for line in ${description}; do
            if [ "${line}" == "%REASON%" ]; then
                found_reason=true
                continue
            fi
            if ${found_reason}; then
                # If the reason on the next line is equal to '1',
                # that means the package was explicitly installed.
                if [ "${line}" == 1 ]; then
                    explicit=$((explicit + 1))
                    unset found_reason
                fi
            fi
        done
        unset IFS
    done
	PACKAGES="${explicit} (explicit) ${total} (total) | pacman"
}

case "${1}" in
    "pacman") count_pacman;;
    *) printf "Sorry, '%s' isn't supported yet...\n" "${1}" && exit 1;;
esac

# Uptime
uptime_file="$(< /proc/uptime)"
IFS=" " read -ra rare_time        <<< "${uptime_file}"
IFS="." read -ra medium_rare_time <<< "${rare_time[0]}"
medium_time="${medium_rare_time[0]}"
# TODO: Find a better way to compact this section.
if [[ "${medium_time}" -gt 86400 ]]; then 
    days=$((medium_time / 60 / 60 / 24))
else
    days=0
fi
if [[ "${medium_time}" -gt 3600 ]]; then
    hours_pre=$((medium_time / 60 / 60))
    hours=$((hours_pre % 24))
else
    hours=0
fi
if [[ "${medium_time}" -gt 60 ]]; then
    minutes_pre=$((medium_time / 60))
    minutes=$((minutes_pre % 60))
else
    minutes=0
fi
UPTIME="${days}d ${hours}h ${minutes}m"

# Output the information.
#
# Example output:
# ---------------
# CPU:      AMD Ryzen 5 3550H with Radeon Vega Mobile Gfx [4 cores, 8 threads]
# DISTRO:   EndeavourOS
# HOSTNAME: TUF-Gaming
# KERNEL:   6.4.7-arch1-3
# PACKAGES: 1722 (explicit) 2183 total) | pacman
# UPTIME:   0d 20h 4m
#
# The line 3 below this one disables a couple of false warnings about quoting.
# It is due to the backslash I added after the first 3 quotes in order to get
# even formatting for the output without a newline at the start.
# shellcheck disable=SC1078,SC1079
printf """\
CPU:      %s [%d cores, %d threads]
DISTRO:   %s
HOSTNAME: %s
KERNEL:   %s
PACKAGES: %s
UPTIME:   %s
""" \
		"${CPU}" "${CORES}" "${THREADS}"\
		"${DISTRO}" "${HOSTNAME}" "${LINUX}"\
		"${PACKAGES}" "${UPTIME}"
